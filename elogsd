#!/usr/bin/env python

import sys
import os
import re
import dateutil
from flask import Flask, jsonify, abort, request
from elogs import Storage
from elogs.query import query as equery, And, Eq, Before, After


app = Flask(__name__)
app.config['DEBUG'] = True

if not 'ELOGSD_PATH' in os.environ:
    sys.exit('Error: environment variable ELOGSD_PATH is not set.')

storage = Storage(os.environ['ELOGSD_PATH'])

query_ex = re.compile(r'(a|d):([^=]+)=(.+)')


class QueryException(ValueError):
    pass


def entry_to_dict(e):
    return dict(id=e.id, date=e.date, attributes=e.attributes, comment=e.comment)


@app.route('/')
def get_logbooks():
    return jsonify(storage.logbooks.keys())


@app.route('/<logbook>')
def get_entries(logbook):
    if not logbook in storage.logbooks:
        return jsonify(error="Logbook {} not found".format(logbook)), 404

    def result(entries):
        return jsonify([entry_to_dict(e) for e in entries])

    log = storage.logbooks[logbook]
    query = request.args.get('q')

    if query is None:
        return result(log.entries.values())

    queries = []

    for q in query.split('|'):
        queries.extend(query_ex.findall(q))

    if not queries:
        return jsonify(error="Malformed query string"), 400

    def make_atom(q):
        qt, key, value = q

        if qt == 'a':
            return Eq(key, value)

        try:
            dt = dateutil.parser.parse(value)
        except ValueError:
            raise QueryException("Malformed query date")

        if key == 'after':
            return After(dt)

        if key == 'before':
            return Before(dt)

        raise QueryException("Malformed query string")

    def build(q):
        if len(q) == 2:
            return And(make_atom(q[0]), make_atom(q[1]))

        return And(make_atom(q[0]), build(q[1:]))
    
    try:
        q = make_atom(queries[0]) if len(queries) == 1 else build(queries)
        return result(equery(log, q))
    except QueryException as e:
        return jsonify(error=e.message), 400


@app.route('/<logbook>/<int:entry>')
def get_entry(logbook, entry):
    if not logbook in storage.logbooks:
        return jsonify(error="Logbook {} not found".format(logbook)), 404

    log = storage.logbooks[logbook]

    if not entry in log.entries:
        return jsonify(error="Entry {} not found".format(entry)), 404

    return jsonify(entry_to_dict(log.entries[entry]))


if __name__ == '__main__':
    app.run(host='0.0.0.0', use_reloader=False)
